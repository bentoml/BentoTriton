[project]
name = "bentotriton-service"
version = "0.1.0"
description = "Triton Inference Service with BentoML"
requires-python = ">=3.12"
dependencies = [
  "bentoml==1.4.13",
  "fastapi==0.115.12",
  "pyyaml==6.0.2",
  "tritonclient[all]==2.56.0",
]
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [{ name = "BentoML Team", email = "contact@bentoml.com" }]

[tool.bentoml.build]
service = "service.py:Triton"
include = ["LICENCE", "*.py", "*.lock", "*.md", "*.toml", "model_repository"]

[tool.ruff]
line-length = 119
indent-width = 2

[tool.ruff.format]
preview = true
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = true
docstring-code-format = true

[tool.ruff.lint]
preview = true
exclude = ["*.ipynb"]
ignore = ["RUF012", "ANN", "E501", "E722", "D", "E401"]
select = [
  "F",
  "D",
  "G",
  "PERF",
  "RUF",
  "W6",
  "E71",
  "E72",
  "E112",
  "E113",
  "E203",
  "E272",
  "E303",
  "E304",
  "E502",
  "E702",
  "E703",
  "E731",
  "W191",
  "W291",
  "W293",
  "UP039",
]

[tool.pyright]
exclude = ["**/__pycache__"]
useLibraryCodeForTypes = true
verboseOutput = true
enableExperimentalFeatures = true
defineConstant = { MYPY = true }
venvPath = "."
venv = ".venv"
pythonVersion = "3.12"
reportMissingImports = "warning"
reportIncompatibleMethodOverride = "warning"
reportMissingTypeStubs = false
reportPrivateUsage = "warning"
reportUnknownArgumentType = "warning"
reportUnsupportedDunderAll = "warning"
reportWildcardImportFromLibrary = "warning"

[tool.mypy]
strict = true
plugins = ['pydantic.mypy', 'mypy.plugins.attrs']
follow_imports = "silent"
ignore_missing_imports = true
check_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
